#include <stdio.h>
#include <cmath>

#include "ros/ros.h"
#include "std_msgs/Float32MultiArray.h"
#include <std_msgs/MultiArrayLayout.h>
#include <std_msgs/MultiArrayDimension.h>

#define LONGUEUR 0.32
#define LARGEUR 0.19
#define RAYON 0.05
#define VMAX 0.5
#define VMIN 0.1
#define WMIN 0.2
#define WMAX 1

ros::Publisher pub_odom; //declaration publisher
ros::Publisher pub_moteur; //declaration du publisher
std_msgs::MultiArrayDimension msg_dim; //variable de dimension du tableau
std_msgs::Float32MultiArray msg; //varriable du tableau qui publie les vitesses des moteurs
std_msgs::MultiArrayDimension odom_dim; //variable de dimension du tableau
std_msgs::Float32MultiArray odom; //variable du tableau qui publie l'odometrie


void callback( const std_msgs::Float32MultiArray& val)
{
  ROS_INFO("---------------------");
  //recuperation des donnees lues sur le subscriber
  float vx = val.data[0]; //vx
  float vy = val.data[1]; //vy
  float w = val.data[2]; //w
  
  /*ROS_INFO("vitX = %f\n", vx);
  ROS_INFO("vitY = %f\n", vy);
  ROS_INFO("LE PREMIER OMEGA !!! = %f\n", w);*/
  
  if(fabs(vx)>VMAX)
  {
  	if(vx>0){vx=VMAX;}
  	else{vx=-VMAX;}
  }
  if(fabs(vy)>VMAX)
  {
  	if(vy>0){vy=VMAX;}
  	else{vy=-VMAX;}
  }
  if(fabs(vx)<VMIN)vx=0.0;
  if(fabs(vy)<VMIN)vy=0.0;
  if(fabs(w) < WMIN)w=0.0;
  if(fabs(w)>WMAX)
  {
  	if(w>0){w=WMAX;}
  	else{w=-WMAX;}
  }

  ROS_INFO("vitX = %lf\n", vx);
  ROS_INFO("vitY = %lf\n", vy);
  ROS_INFO("OMEGA = %lf\n", w);
  
  
  float vit4 = ((1/RAYON) * (vx + vy - w*(LONGUEUR + LARGEUR)));
  float vit1 = ((1/RAYON) * (vx - vy + w*(LONGUEUR + LARGEUR)));
  float vit3 = ((1/RAYON) * (vx - vy - w*(LONGUEUR + LARGEUR)));
  float vit2 = ((1/RAYON) * (vx + vy + w*(LONGUEUR + LARGEUR)));
 
 
  ROS_INFO("vitesse 1 = %f\n", vit1);
  ROS_INFO("vitesse 2 = %f\n", vit2);
  ROS_INFO("vitesse 3 = %f\n", vit3);
  ROS_INFO("vitesse 4 = %f\n", vit4);
  
  //publication sur valeur_moteur
  msg.data.clear();
  msg.data.push_back(vit1);
  msg.data.push_back(vit2);
  msg.data.push_back(vit3);
  msg.data.push_back(vit4);
  pub_moteur.publish(msg);
  
  //publication sur valeur_odom
  odom.data.clear();
  odom.data.push_back(vx);
  odom.data.push_back(vy);
  odom.data.push_back(w);
  pub_odom.publish(odom);
  
}

int main( int argc, char** argv )
{
  ros::init(argc, argv, "vitesse_moteur");

  ros::NodeHandle n; //declaration de nodehandle  
  //initilisation des dimensions du tableau
  msg_dim.label = "vitesses";
  msg_dim.size = 4;
  
  odom_dim.label = "odometrie";
  odom_dim.size = 3;
  
  msg.layout.dim.clear();
  msg.layout.dim.push_back(msg_dim);
  
  odom.layout.dim.clear();
  odom.layout.dim.push_back(odom_dim);
  
  //initialisation du publisher vitesse moteur
  pub_moteur = n.advertise<std_msgs::Float32MultiArray>("valeur_moteur", 1);
  
  //initialisation du publisher d'odom
  pub_odom = n.advertise<std_msgs::Float32MultiArray>("valeur_odom",1);
  
  //declaration et initilaisation du subscriber
  ros::Subscriber sub_coManip =  n.subscribe("valeur_triplet", 1, callback);
  
 /*  ros::Rate r(10); // 10 hz
while (ros::ok())
{
  //... do some work, publish some messages, etc. ...
  ros::spinOnce();
  r.sleep();
}*/
ros::spin();
  return 0;
}
  
  
 /*vitesse max d'une roue = 15 rad/s ==> encodeur donne 6000 environ*/
  
  
  
  
  
  
